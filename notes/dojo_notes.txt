
Section 3 - DOJO DOM Selectors

Legacy Syntax:
-----------------
dojo.ready(function(){});


AMD - Aynchronus Module Definition
load modules on demand
AMD Loader - on page load; makes use of two functions
1) require
2) define

AMD Syntax:
-------------------
require([module1,module2,...], function(module1,module2,...){});
require(["dojo/domready!"],function(){});

    <script type="text/javascript">
        require(["dojo/dom","dojo/query","dojo/domReady!"],function(dom,query){
            var i = dom.byId("test");
            var j = query("#test");
            j[0].innerHTML="AMD Test";
            console.log(i.innerHTML);
        });
    </script>

- For ID module - need to include dojo/dom module
- For class module - need to include dojo/query module



Section 4 - Event Handling with DOJO
------------------------------------

DOM Functions -
1. Query
2. Create
3. Place
4. Destroy

Dojo-On module:
- event listening
- event dispatching

Syntax:

Single Node

require(["dojo/on"], function(on) {
 on(target, "event", function(e){
  // handle event
 });
});


Event handle:

var handle = on(myButton, "click"


DOM CLASS MANIPULATION
----------------------

-> class - collection of css attributes
-> Node can have multiple classes
-> dojo/dom-class module is used to work with classes

Contains 5 methods

contains(<node>,<class>) - returns a boolean, true if present, otherwise false

add(<node>,<class>) - add class to node (ignored if already present)

remove(<node>,<class>) - remove class from node

toggle(<node>,<class>) - remove if present, add if absent

replace(<node>,<oldClass>,<newClass>) 


Lecture 20 - Publish - Subscribe DOJO event system

Dojo Publish/Subscribe event system

-- No reference to any object or node.
-- Publisher doesn't need to know about subscribers
-- Available in dojo/topic module

Syntax:
For publish:

Method 1:
------------
topic.publish("topic name",[param1,param2,param3,...]);

For subscribe:

topic.subscribe("topic name", function(params){

----Event handling code-----
});



Method 2:
----------
topic.publish("topic name","param1","param2","param3",...);

For subscribe:

topic.subscribe("topic name", function(param1,param2,param3,...){
---Event handling code---
});


Method 3:
-----------
topic.publish("topic name",{p1:"param1",p2:"param2",...});

For subscribe:

var handle = topic.subscribe("topic name", function(params){

params.p1
params.p2
----Event handling code-------
});

handle.remove();

-- Topic name must be unique, no globbing allowed.
-- Subscribe returns an event handle, can be removed.


Section 5 - DOJO DOM Manipulations
-------------

DOM Functions:
---------------
1. Query/Retrieval
2. Placement
3. Create
4. Empty
5. Destroy


Placement

- dom-construct module
- Move nodes around in the dom

Syntax:
- 3 arguments
domConstruct.place()
- Node, ref, pos


Create

- Create new nodes
- Set parameters on the node
- Place the node

domConstruct.Create()
- 4 arguments
- Node, Attributes, Reference, Position
- 3 Optional


Section 6
DOJO EFFECTS AND ANIMATIONS
---------------------------

1. Fadein
2. Fadeout

Syntax

fx.fadeIn({parameters});
fx.fadeOut({parameters});

fx is the dojo/_base/fx module.

use .play(); to play animation


WIPE

dojo/fx

1. wipeIn({parameters})
2. wipeOut({parameters})


SLIDETO

Move nodes around 

fx.slideTo({parameters})

node, top, left

AnimateProperty

resides inside dojo/_base/fx module

fx.animateProperty({
node:"nodeId",
properties:{cssProperty1: value,  (ex: width:300px;  default-end)
     cssProperty2:{start:value1,end:value2}(ex: height:{start:100px,end:200px}),
     cssProperty3:{end:value1,unit:unitType(ex: width:{end:300, unit="pt"})}

}
});


-------------------------------------------------
Chaining and combining

combine([animation1, animation2, etc...])

chain([animation1, animation2, etc...])

present in dojo/fx module


-------------------------------------------------
Animation events

Animation controls - Play, pause, stop

Animation Events - Used for listening to and performing custom actions before, during and after the animation.

1. beforeBegin
2. onBegin
3. onPlay
4. onAnimate
5. onEnd

fx.fadeOut(
 node:"nodeId"
 duration:1000,
 delay:2000,
 beforeBegin:function(){
   ------------steps
 };

onEnd:function(){}

)

var fadeOutAnimation = fx.fadeOut({node:"nodeId",duration:2000});

on(fadeOutAnimation,"onEnd",function(){
---steps...

});






